import * as deviceLinkingIdentification from "./deviceLinkingIdentification";

test("deviceLinkingIdentification.stringify", () => {
  expect(
    deviceLinkingIdentification.stringify({
      version: "1",
      idKey: "aaa",
      signingKey: "ccc",
      oneTimeKey: "ddd",
      secret: "123123",
      fallbackKey: "abc",
      fallbackKeySignature: "cde",
    })
  ).toBe(
    "fallbackKey=abc&fallbackKeySignature=cde&idKey=aaa&oneTimeKey=ddd&secret=123123&signingKey=ccc&version=1"
  );
});

test("deviceLinkingIdentification.parse", () => {
  expect(
    deviceLinkingIdentification.parse(
      "fallbackKey=abc&fallbackKeySignature=cde&idKey=aaa&oneTimeKey=ddd&secret=123123&signingKey=ccc&version=1"
    )
  ).toMatchObject({
    version: "1",
    idKey: "aaa",
    signingKey: "ccc",
    oneTimeKey: "ddd",
    secret: "123123",
    fallbackKey: "abc",
    fallbackKeySignature: "cde",
  });
});

test("deviceLinkingIdentification.parse fails due wrong version", () => {
  expect(() =>
    deviceLinkingIdentification.parse(
      "fallbackKey=abc&fallbackKeySignature=cde&idKey=aaa&oneTimeKey=ddd&secret=123123&signingKey=ccc&version=22"
    )
  ).toThrow("The invitation was generated by a newer App version.");
});

test("deviceLinkingIdentification.parse fails due missing entry", () => {
  expect(() =>
    deviceLinkingIdentification.parse(
      "fallbackKey=abc&fallbackKeySignature=cde&idKey=aaa&oneTimeKey=ddd&secret=123123&signingKey=ccc"
    )
  ).toThrow("Missing the version entry.");
  expect(() =>
    deviceLinkingIdentification.parse(
      "fallbackKeySignature=cde&idKey=aaa&oneTimeKey=ddd&secret=123123&signingKey=ccc&version=1"
    )
  ).toThrow("Missing the fallbackKey entry.");
  expect(() =>
    deviceLinkingIdentification.parse(
      "fallbackKey=abc&idKey=aaa&oneTimeKey=ddd&secret=123123&signingKey=ccc&version=1"
    )
  ).toThrow("Missing the fallbackKeySignature entry.");
  expect(() =>
    deviceLinkingIdentification.parse(
      "fallbackKey=abc&fallbackKeySignature=cde&oneTimeKey=ddd&secret=123123&signingKey=ccc&version=1"
    )
  ).toThrow("Missing the idKey entry.");
  expect(() =>
    deviceLinkingIdentification.parse(
      "fallbackKey=abc&fallbackKeySignature=cde&idKey=aaa&secret=123123&signingKey=ccc&version=1"
    )
  ).toThrow("Missing the oneTimeKey entry.");
  expect(() =>
    deviceLinkingIdentification.parse(
      "fallbackKey=abc&fallbackKeySignature=cde&idKey=aaa&oneTimeKey=ddd&signingKey=ccc&version=1"
    )
  ).toThrow("Missing the secret entry.");
  expect(() =>
    deviceLinkingIdentification.parse(
      "fallbackKey=abc&fallbackKeySignature=cde&idKey=aaa&oneTimeKey=ddd&secret=123123&version=1"
    )
  ).toThrow("Missing the signingKey entry.");
});
